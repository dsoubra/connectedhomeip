# example workflow to manage Arm Virtual Hardware with Self-Hosted Runner
name: AVH_RPi4_Matter

# When the workflow will run
on:
  workflow_dispatch:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]

jobs:
  rebuild_lighting_app:
    runs-on: self-hosted
    steps:
     - uses: actions/checkout@v2
     
     - name: submodules
       run: ./scripts/checkout_submodules.py --shallow --platform linux
       
     - name: bootstrap and build
       run: |
         ./scripts/build/gn_bootstrap.sh
         source scripts/activate.sh
         cd examples/lighting-app/linux
         echo $PATH
         gn gen out/debug
         ninja -C out/debug

  run_lighting_app:
    needs: rebuild_lighting_app
    runs-on: self-hosted
    steps:
      - name: Run lighting-app for 1 minute
        run: |
          cd examples/lighting-app/linux
          pwd
          timeout 60s ./out/debug/chip-lighting-app || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi

  chip_tool:
    needs: rebuild_lighting_app
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Install Node
        uses: actions/setup-node@aa759c6c94d3800c55b8601f21ba4b2371704cb7
        with:
          node-version: 14.17.2
      - name: Install  API
        run: npm install @arm-avh/avh-api --save
#      - name: Run script
#        env:
#            AVH_USERNAME: ${{ secrets.AVH_USERNAME }}
#            AVH_PASSWORD: ${{ secrets.AVH_PASSWORD }}
#        run: node .github/workflows/chip_tool.js
