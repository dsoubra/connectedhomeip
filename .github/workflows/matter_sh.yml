# example workflow to manage Arm Virtual Hardware with Self-Hosted Runner
name: AVH_RPi4_Matter

# When the workflow will run
on:
  workflow_dispatch:
#  push:
#    branches: [ main ]
#  pull_request:
#    branches: [ main ]

jobs:
  matter_setup:
    runs-on: self-hosted
    steps:
     - uses: actions/checkout@v2
     
     - name: submodules
       run: ./scripts/checkout_submodules.py --shallow --platform linux
       
     - name: bootstrap
       run: |
         ./scripts/build/gn_bootstrap.sh
         source scripts/activate.sh
         
     - name: Rebuild lighting-app
       run: |
         cd examples/lighting-app/linux
         gn gen out/debug
         ninja -C out/debug
       
#  build_lighting_app:
#    needs: matter_setup
#    runs-on: self-hosted
#    steps:
#      - name: Rebuild lighting-app
#        run: |
#          cd examples/lighting-app/linux
#          gn gen out/debug
#          ninja -C out/debug

  run_lighting_app:
#    needs: build_lighting_app
    needs: matter_setup
    runs-on: self-hosted
    steps:
      - name: Run lighting-app for 1 minute
        run: |
          pwd
          timeout 60s ./out/debug/chip-lighting-app || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi         

# https://stackoverflow.com/questions/63641822/run-command-with-timeout-in-github-workflow
